{
  "BootstrapBlazor.Shared.App": {
    "Title": "Bootstrap Blazor enterprise-level UI component library",
    "Reload": "Reload",
    "ErrorMessage": "An unhandled exception has occurred. See browser dev tools for details."
  },
  "BootstrapBlazor.Shared.Pages.Index": {
    "BodyClassString": "welcome-body-en",
    "HeaderTitle": "Bootstrap style Blazor UI component library",
    "HeaderDesc": "Based on the <code>Bootstrap</code> style library, it is carefully built, and {0} a variety of commonly used components have been added to bring you an extraordinary feeling for rapid development projects",
    "HeaderBody": "The ",
    "HeaderBody1": "native Blazor components library on the market",
    "DynamicText": "best to use",
    "DynamicText1": "best looking",
    "DynamicText2": "most simple and practical",
    "TagTitle": "Component",
    "Span1": "Tree",
    "Span2": "Menu",
    "Span3": "Tag",
    "Span4": "Table",
    "Span5": "Layout",
    "Span6": "Notification",
    "Span7": "Upload",
    "Span8": "Switch",
    "CarouselH1": "Chart Component",
    "CarouselP1": "Provide a variety of commonly used chart components",
    "CarouselH2": "Chart IconComponent",
    "CarouselP2": "Multi-dimensional data comparison",
    "CarouselH3": "Full-featured table component",
    "CarouselP3": "With all functions of adding, deleting, modifying, searching, paging, and sorting",
    "CarouselH4": "Super timeline function",
    "CarouselP4": "Custom nodes display arbitrary components",
    "ContainerH1": "Rich Components",
    "ContainerD1": "This set of components library contains more than {0} multiple components, from simple buttons to complex page-level components",
    "ContainerH2": "Performance",
    "ContainerD2": "Each control has been fine-tuned to optimize the refresh logic between parent and child components to avoid multiple loop updates",
    "ContainerH3": "Easy to use",
    "ContainerD3": "Easily grasp how to use components and quickly incorporate BootstrapBlazor controls into the project",
    "ContainerH4": "Free and open source",
    "ContainerD4": "Simple, direct, free to use, no dependent components, dependent on jQuery Bootstrap are all built-in",
    "ContainerH5": "Demos and examples",
    "ContainerD5": "Detailed documentation and online demonstration, simple function setting, direct copy code out of the box",
    "ContainerH6": "Continually updated",
    "ContainerD6": "Gitee platform hosting open source, never closed source, continuous update, timely response to questions and feedback",
    "DonateH1": "Donate",
    "DonateH2": "Scan the code to donate and invite the author to have a cup of coffee"
  },
  "BootstrapBlazor.Shared.Shared.HomeLayout": {
    "FooterH1": "Related Works",
    "FooterLi1": "Slider verification code",
    "FriendLink": "Links",
    "FriendLi1": "Lin Dexi's Blog",
    "FriendLi2": "CCFlow",
    "Community": "Community",
    "CommunityLi1": "Contribution guide",
    "CommunityLi2": "Join us",
    "CommunityLi3": "Contact details",
    "SpecialAcknowledgements": "Special Thanks",
    "Footer": "Gitee Hosting Platform"
  },
  "BootstrapBlazor.Shared.Pages.Labels": {
    "Title": "Component label",
    "P1": "This set of components includes <code>ValidateForm</code> <code>EditorForm</code> and a variety of <b>Form components</b> inherited from <code>ValidateBase&lt;TValue&gt;</code>. Among these components There is a special set of display front label logic, now let’s sort it out in a unified way:",
    "UlLi1": "The <a href='/validateforms' target='_blank'>ValidateForm</a> component is a <b>verifiable</b> form component. The form component in this component will automatically perform data compliance checks. If Data non-compliance will prevent the <b>Submit</b> action, which is the most frequently used component in data submission",
    "UlLi2": "The <a href='/editorforms' target='_blank'>EditorForm</a> component is an ordinary form component. After this component is bound to the <code>Model</code>, the entire form can be automatically generated, which greatly reduces repetition Code, put the <code>ValidateForm</code> on the outside to open the <b>data compliance check</b> very convenient, concise and efficient",
    "P2": "Take the <a href='inputs' target='_blank'>BootstrapInput</a> input box component as an example to explain whether to display the <code>Label</code> logic",
    "Tips": "The logic of <code>ShowLabel</code> is the principle of proximity. The closer the setting is to itself, the setting takes effect. For example, the form component is built into the <code>ValidateForm</code> component, even if <code>ValidateForm</code> is set to <code> >ShowLabel=true</code>, when the form component itself sets <code>ShowLabel=false</code>, the final result of the label is <b>not displayed</b>",
    "Block1Title": "Use alone",
    "Block1Intro": "Suitable for data entry",
    "Block1P1": "When two-way binding is not used",
    "Block1Li1": "<code>Label</code> will not be displayed by default",
    "Block1Li2": "Control whether to display through the <code>ShowLabel</code> property",
    "Block1Li3": "Display content when setting <code>DisplayText</code>",
    "Block1Li4": "When not set, render a contentless <code>label</code> component as a placeholder",
    "GroupBox1Title": "No two-way binding",
    "GroupBox1D1": "No settings in the first text box, no label",
    "GroupBox1D2": "The second text box setting <code>ShowLabel='true' DisplayText=``</code> displays a placeholder label without content",
    "GroupBox1D3": "The third text box setting <code>ShowLabel='true' DisplayText='Name'</code> shows the set content label",
    "GroupBox1D4": "The fourth text box setting <code>ShowLabel='true' DisplayText='@@null'</code> displays a placeholder label without content",
    "P3": "When using two-way binding",
    "GroupBox2Title": "Two-way binding",
    "GroupBox2D1": "The first text box is set to <code>@@bind-Value='Dummy.Name'</code>, no label is displayed",
    "GroupBox2D2": "The second text box setting <code>@@bind-Value='Dummy.Name' ShowLabel='true' DisplayText='@@Localizer[nameof(Foo.Address)]'</code> Display the contents of the setting",
    "GroupBox2D3": "The third text box setting <code>@@bind-Value='Dummy.Name' ShowLabel='true' DisplayText=``</code> Show no content placeholder label",
    "GroupBox2D4": "The fourth text box setting <code>@@bind-Value='Dummy.Name' ShowLabel='true' DisplayText='@@null'</code> Display the label content under the resource file mechanism<code>Label</code> code>",
    "Block2Title": "Used in EditorForm",
    "Block2Intro": "Not used in <code>ValidateForm</code>",
    "P4": "<b>Show label</b><div>The <code>ShowLabel</code> property of the <coe>EditorForm</coe> component is not set. If it is not set, it is equivalent to set to <code>true</code>. All components <b>display</b> tags</div>",
    "P5": "<b>Do not display labels</b><div>Set <code>ShowLabel='false'</code>, all form components in the component <b>Do not display</b> tags</div>",
    "Block3Title": "Use in EditorForm built-in ValidateForm",
    "Block3Intro": "Used in external <code>ValidateForm</code>",
    "P6": "<b>Show label</b><div>The <code>ShowLabel</code> property of the <coe>EditorForm</coe> component is not set. If it is not set, it is equivalent to set to <code>true</code>. All components <b>display</b> tags</div>",
    "P7": "<b>Do not display labels</b><div>Set <code>ShowLabel='false'</code>, all form components in the component <b>Do not display</b> tags</div>",
    "Block4Title": "Used in ValidateForm",
    "Block4Intro": "Show labels are automatically turned on by default",
    "P8": "<b>Show label</b><div>The <code>ShowLabel</code> property of the <coe>EditorForm</coe> component is not set. If it is not set, it is equivalent to set to <code>true</code>. All components <b>display</b> tags</div>",
    "P9": "<b>Do not display labels</b><div>Set <code>ShowLabel='false'</code>, all form components in the component <b>Do not display</b> tags</div>",
    "P10": "<b>Show labels</b><div>set class <code>form-inline</code> for the all labels within the component are prefixed</div>"
  },
  "BootstrapBlazor.Shared.Pages.Install": {
    "InstallTitle": "Install",
    "GitP1": "There are many kinds of Git tools that everyone is familiar with, here I introduce two Git client tools",
    "GitP2": "It is recommended to use the <a href='https://fork.dev'>Fork</a> tool to install, it can better and <a href='https://visualstudio.microsoft.com/vs/getting- started/' target='_blank'>Visutal Studio</a> to use with development tools.",
    "NugetInstall": "Nuget Install",
    "NugetP1": "Use <a href='https://www.nuget.org/packages?q=BootstrapBlazor' target='_blank'>nuget.org</a> to install BootstrapBlazor components",
    "EnvBuildTitle": "Project Environment Construction",
    "EnvLi1": "Install .net core sdk <a href='http://www.microsoft.com/net/download' target='_blan'>Official Website</a>",
    "EnvLi2": "Install Visual Studio 2019 and above <a href='https://visualstudio.microsoft.com/vs/getting-started' target='_blank'>Official website",
    "EnvLi3": "Pull the project code BootstrapBlazor <a href='https://gitee.com/LongbowEnterprise/BootstrapBlazor' target='_blank'>Warehouse URL</a>"
  },
  "BootstrapBlazor.Shared.Pages.Template": {
    "Title": "Project Template",
    "SubTitle": "Bootstrap Blazor App Template",
    "P1": "In order to make it easier for everyone to use this set of components to quickly build projects, the author has made <b>Project Templates</code></b>, using <code>dotnet new</code> command line mode, using Proceed as follows:",
    "P2": "1. Install the project template",
    "P3": "2. Create project",
    "P4": "After the project is created, the <code>BootstrapBlazorApp</code> solution will be generated in the current folder, and the <code>src</code> directory contains <code>Server-Side</code> <code>Wasm</code> Both types of projects can be run directly with <kbd>F5</kbd>",
    "P5": "3. Update project template",
    "P6": "The dotnet new --update-apply option checks if there are updates available for the template packages that are currently installed and installs them.",
    "P7": "3. Uninstall project template",
    "SubTitle1": "Bootstrap Blazor App Extension",
    "P8": "In order to facilitate the use of the <code>Bootstrap Blazor</code> component library, the author has created the <b>Project Template (<code>Bootstrap Blazor Project Template</code>)</b> extension plug-in, which can be installed through <code >Visual Studio 2019 IDE</code> When creating a new project, select the <code>Bootstrap Blazor project template</code>, and the solution is built in two types: <code>Server-Side</code> and <cide>wasm</cide> project"
  },
  "BootstrapBlazor.Shared.Pages.Golbalization": {
    "Title": "Globalization",
    "SubTitle": "ASP.NET Core Blazor Globalization",
    "P1": "Please check <a href='https://docs.microsoft.com/zh-cn/aspnet/core/blazor/globalization-localization?view=aspnetcore-3.1' target='_blank'> before reading the following knowledge points Official document</a>"
  },
  "BootstrapBlazor.Shared.Pages.Components.InstallContent": {
    "H1": "Component reference",
    "P1": "There are many ways to reference components, please refer to <a href='install'>Installation</a>",
    "H2": "CSS file",
    "P2": "Add the Bootstrap CSS file in the form of <code>&lt;link&gt;</code> tags to the <code>{0}</code> file <code>&lt;head&gt;</code> tags, and place them in all Before other style sheets.",
    "Tips": "After this set of components version <b>5.0.32</b> remove the built-in <code>font-awesome</code> icon, please download it yourself or use the <b>CDN</b> acceleration service",
    "Tips2": "If you use the <code>Blazor App</code> template to create a project, please remove the default <code>Bootstrap</code> style link <code>&lt;link rel='stylesheet' href='css/bootstrap/bootstrap.min.css' /&gt;</code>",
    "H3": "JS file",
    "P3": "Many components provided by Bootstrap rely on JavaScript to run. Specifically, these components rely on jQuery, Popper.js, and our own JavaScript plug-ins. Put the following <code>&lt;script&gt;</code> tag at the end of the <code>{0}</code> file and before the <code>&lt;/body&gt;</code> tag, it will work.",
    "H4": "Add the namespace to the <code>_Imports.razor</code> file",
    "H5": "Registration Service",
    "H6": "Use components",
    "P4": "Reference the <code>BootstrapBlazor</code> component in the <code>razor</code> component",
    "Pre3": "&lt;Button Color='Color.Primary'&gt;Button&lt;/Button&gt;"
  },
  "BootstrapBlazor.Shared.Pages.Install_Server": {
    "Title": "Server Side",
    "CodeComment": "Add this line of code"
  },
  "BootstrapBlazor.Shared.Pages.Install_wasm": {
    "Title": "Client Side",
    "CodeComment": "Add this line of code"
  },
  "BootstrapBlazor.Shared.Pages.Dividers": {
    "Title": "Dividing line",
    "H1": "The dividing line that separates the content.",
    "Block1Title": "Basic usage",
    "Block1Intro": "Split text paragraphs in different chapters.",
    "P1": "Youth is a short dream, when you wake up, it has long since disappeared.",
    "P2": "A small amount of evil is enough to cancel out all the noble qualities, causing people to be infamous.",
    "Block2Title": "Set copy",
    "Block2Intro": "You can customize the content of the copy on the dividing line.",
    "D1": "Young Bao Qingtian",
    "D2": "League of Legends",
    "D3": "Learning Quotations",
    "P3": "A sunny day above my head, I missed one in my heart",
    "P4": "When the knight returns, the day the broken sword is reforged",
    "P5": "A cute icon",
    "P6": "Learning makes me happy",
    "Block3Title": "Settings icon",
    "Block3Intro": "You can customize the content of the copy on the dividing line.",
    "D4": "Bookmarks",
    "Block4Title": "Vertical split",
    "Block4Intro": "Display dividing line vertically",
    "S1": "Rain",
    "S2": "Old hometown",
    "S3": "Deep vegetation",
    "D5": "Dividing line",
    "Block5Title": "Custom content",
    "Block5Intro": "Any content can be customized by setting the content of <code>ChildContent</code>",
    "Div": "I am a custom content <code>div</code> element",
    "Desc1": "Set the split line to display text",
    "Desc2": "Set the split line display icon",
    "Desc3": "Set the split line display text alignment",
    "Desc4": "Set whether the dividing line is vertical division",
    "Desc5": "ChildContent template"
  },
  "BootstrapBlazor.Shared.Pages.Scrolls": {
    "Title": "Scroll",
    "H1": "Add scroll bars to components whose height or width exceeds the standard",
    "P1": "The scroll bar can be rendered only when its element has a fixed height. Its <code> height </code> attribute can be set through the coat element",
    "Block1Title": "Common usage",
    "Block1Intro": "Add a scroll bar to the component. By setting the height of <code>Height</code> to 200px, the scroll bar appears when the height of the inner child element is 400px",
    "D1": "Please scroll the scroll bar on the right",
    "D2": "bottom",
    "Desc1": "Subassembly",
    "Desc2": "Component height"
  },
  "BootstrapBlazor.Shared.Pages.Layouts": {
    "Title": "Layout",
    "H1": "The container component used for layout, which is convenient to quickly build the basic structure of the page:",
    "Code1": "Outer container. When the child element contains <code>Header</code> or <code>Footer</code>, all child elements will be arranged vertically up and down, otherwise they will be arranged horizontally.",
    "Code2": "Top bar container",
    "Code3": "Sidebar container",
    "Code4": "Main area container",
    "Code5": "Bottom bar container",
    "H2": "Component overview",
    "Code6": "Layout container, <code>Header</code> <code>Sider</code> <code>Main</code> <code>Footer</code> or <code>Layout</code> itself can be nested under it , Can be placed in any parent container",
    "Code7": "Top layout, with default style, any elements can be nested under it",
    "Code8": "Sidebar, with default style and basic functions, any elements can be nested under it",
    "Code9": "The content part, with its own default style, any element can be nested under it",
    "Code10": "Bottom layout, with default style, any element can be nested under it",
    "P1": "The above components adopt flex layout, please make sure the target browser is compatible before using. In addition, the child element of <code>Layout</code> can only be the latter four, and the parent element of the latter four can only be <code>Layout</code>",
    "b1": "Matters needing attention",
    "P2": "In order to make it easy for everyone to use this set of components to quickly build projects, the author has created <b>Project Templates</code></b>, using the <code>dotnet new</code> command line, and < code>Bootstrap Blazor App Extension extension plug-in</code> Create a new project through <code>Visual Studio 2019</code>. For specific usage and steps, please click <a href='template' target='_blank'>Portal</a>",
    "H3": "Common page layout",
    "Block1Title": "Top, middle and bottom layout",
    "Block1Intro": "Commonly found in Internet website layout",
    "Block2Title": "Left and right structural layout in the middle",
    "Block2Intro": "The middle part adopts the left and right structure, which is mostly used for back-end management website layout. When the <code>Side</code> component is added to the layout template, the upper middle and lower parts are used by default, and the middle part adopts the left and right structure layout.",
    "Block3title": "Left and right structure",
    "Block3Intro": "The right side adopts an upper, middle and lower structure, which is mostly used for back-end management of the website layout, and the layout is controlled to the left and right structure by setting the <code>IsFullSide</code> attribute value",
    "Block4Title": "Customize sidebar width support percentage",
    "Block4Intro": "The width of the sidebar is controlled by setting the <code>SideWidth</code> property, which supports percentage writing. When setting <code>0</code>, the width setting function is turned off, and the internal sub-controls are used to fill the width feature",
    "Block5Title": "Practical application",
    "D1": "In actual use, the sidebar generally has two uses",
    "D2": "The sidebar fills the entire screen, and scroll bars appear when the overall height of the menu exceeds the screen",
    "D3": "The sidebar is not processed and the height is automatically opened by the content",
    "D4": "Because there are many ways to use it, this component is not packaged, and it is up to you to decide how to carry out the layout. The following is a practical example in actual use",
    "P3": "In order to facilitate your study and comparison, try to use the <code>style</code> inline style in the following practical examples",
    "P4": "In this example, a scroll bar appears after clicking the menu on the left to expand",
    "Tips1": "The available area in the right panel is all by default, which is suitable for layouts with <code>Tab</code> components. In this example, for the sake of beauty, the <code>Main</code> template has a built-in <code>div</code > And set the style to <code>style='padding: 1rem;'</code>",
    "P5": "In this example, if the scroll bar does not appear after clicking the left menu to expand, the height of the parent container will be expanded",
    "P6": "Please refer to <a href='/tabs'>Tab component</a> for practical examples of using <code>Layout</code> component and <code>Tab</code> component together",
    "Block6Title": "Full page level components",
    "Tips2": "By setting the <code>IsPage</code> property to set whether the <code>Layout</code> component controls the layout of the front page level, after setting it to <code>true</code>, the component adopts the full-screen layout",
    "Li": "Whole page component generator",
    "Desc1": "Header component template",
    "Desc2": "Sidebar component template",
    "Desc3": "Sidebar width, support percentage, turn off the width function when set to 0",
    "Desc4": "Content component template",
    "Desc5": "Footer component template",
    "Desc6": "Sidebar menu data collection when the whole page is laid out",
    "Desc7": "Whether the sidebar occupies the entire left",
    "Desc8": "Whether it is the whole page layout",
    "Desc9": "Whether to fix the Footer component",
    "Desc10": "Whether to fix the Header component",
    "Desc11": "Whether to show contraction and expansion Bar",
    "Desc12": "Whether to show Footer template",
    "Desc13": "Whether to display the back to top button",
    "Desc14": "Whether to open multi-label mode",
    "Desc15": "Collection of additional programs, passed to the Tab component for use",
    "Desc16": "Contract expand callback delegate",
    "Desc17": "Call back the delegate when the menu item is clicked"
  },
  "BootstrapBlazor.Shared.Pages.Footers": {
    "Title": "Footer",
    "H1": "Displayed at the bottom of the page, with a back to top button",
    "P1": "When using <code>Footer</code> components, pay attention to the setting of the style sheet <code>position</code> attribute",
    "BlockTitle": "Basic usage",
    "BlockIntro": "Pass the ID of the scroll bar component to the footer component",
    "P2": "The Footer component is displayed at the bottom, and the page will automatically scroll back to the top when you click to return to the top",
    "P3": "This example passes the component client ID",
    "Desc1": "The text displayed by the footer component",
    "Desc2": "The ID of the scroll bar component controlled by the footer component"
  },
  "BootstrapBlazor.Shared.Pages.Rows": {
    "Title": "Row",
    "H1": "The number of components displayed in a row can be easily set",
    "Block1Title": "Place common controls",
    "Block1Intro": "Put your own components inside <code>Row</code>",
    "b1": "3 rows are displayed, using <code>Row</code>",
    "Block2Title": "Place form controls (inline)",
    "Block2Intro": "When placing form controls, you can specify <code>RowType</code> as <code>Inline</code>, and <b>Label</b> will be displayed on the left, and the control will fill the remaining space",
    "Block3Title": "Place form controls",
    "Block3Intro": "When placing form controls, you can specify <code>Normal</code> as <code>FormRow</code>, and <b>Label</b> will be displayed on the top, and the control will be full",
    "P1": "In this example, the <code>Row</code> component is built into the <code>ValidateForm</code> component, and the front <code>Label</code> tag is automatically added",
    "Block4Title": "Nested use",
    "Block4Intro": "The <code>Row</code> component supports nested use. For example, the outermost <code>Row</code> below sets a row to display two controls, the first is <code>TextBox</code>, the second One is still <code>Row</code>, and the second <code>Row</code> continues to be set to display two controls",
    "Block5Title": "Cross-column",
    "Block5Intro": "The <code>Row</code> component can set the number of spanning columns by specifying the <code>ColSpan</code> value. Combining these functions can achieve complex layouts",
    "b2": "4 in a row",
    "b3": "2 in a row",
    "b4": "The row shows 4 <code>Address</code> in 2 columns",
    "b5": "Row shows 4, the second component <code>ColSpan</code> is set to 3",
    "b6": "Row shows 2, the first component <code>ColSpan</code> is set to 3",
    "b7": "A component in a row",
    "Desc1": "Set a row to display several controls",
    "Desc2": "Set the layout format, if the child Row is not specified, the parent Row’s settings will be used",
    "Desc3": "Set the number of columns of child Row across parent Row",
    "Desc4": "Set the maximum number of controls displayed in a row"
  },
  "BootstrapBlazor.Shared.Pages.Skeletons": {
    "Title": "Skeleton",
    "H1": "Provide a placeholder graphic combination where you need to wait for content to load",
    "b1": "When to use",
    "Li1": "When the network is slow and it takes a long time to wait for the loading process",
    "Li2": "Lists/cards with more graphic information content",
    "Li3": "Only used when loading data for the first time",
    "Li4": "Can be completely replaced by Spin, but can provide better visual effects and user experience than Spin in available scenarios",
    "Block1Title": "Picture frame screen",
    "Block1Intro": "Suitable for display when loading avatars, pictures, etc.",
    "P1": "It can be set to a circle display by setting the <code>Circle</code> property",
    "Block2Title": "Paragraph skeleton screen",
    "Block2Intro": "Applicable to display when loading large paragraphs of text and other types",
    "P2": "The default paragraph skeleton screen only displays three lines. If you need multiple lines to occupy space, please place multiple <code>SkeletonParagraph</code>.",
    "Block3Title": "Form skeleton screen",
    "Block3Intro": "Suitable for display when the edit form is loaded",
    "Block4Title": "Table skeleton screen",
    "Block4Intro": "Applicable to display when the edit table is loaded"
  },
  "BootstrapBlazor.Shared.Pages.Coms": {
    "Search": "Search for the desired component",
    "Text1": "Layout",
    "DividerText": "Divider",
    "LayoutText": "Layout",
    "FooterText": "Footer",
    "ScorllText": "Scroll",
    "SkeletonText": "Skeleton",
    "SplitText": "Split",
    "Text2": "Navigation",
    "AnchorText": "Anchor",
    "BreadcrumbText": "Breadcrumb",
    "MenuText": "Menu",
    "NavText": "Nav",
    "DropdownText": "Dropdown",
    "GoTopText": "GoTop",
    "PaginationText": "Pagination",
    "StepsText": "Steps",
    "TabText": "Tab",
    "Text3": "Form",
    "EditorFormText": "EditorForm",
    "ValidateFormText": "ValidateForm",
    "AutoCompleteText": "AutoComplete",
    "ButtonText": "Button",
    "CascaderText": "CascadingSelection",
    "CheckboxText": "Checkbox",
    "CheckboxListText": "CheckboxList",
    "ColorPickerText": "ColorPicker",
    "DateTimePickerText": "DateTimePicker",
    "DateTimeRangeText": "DateTimeRange",
    "EditorText": "Editor",
    "InputText": "Input",
    "InputNumberText": "InputNumber",
    "MarkdownText": "Markdown",
    "RadioText": "Radio",
    "RateText": "Rate",
    "SelectText": "Select",
    "MultiSelectText": "MultiSelect",
    "SliderText": "Slider",
    "SwitchText": "Switch",
    "TextareaText": "Textarea",
    "ToggleText": "Toggle",
    "TransferText": "Transfer",
    "UploadText": "Upload",
    "Text4": "Data",
    "AvatarText": "Avatar",
    "BadgeText": "Badge",
    "CardText": "Card",
    "CalendarText": "Calendar",
    "CaptchaText": "Captcha",
    "CarouselText": "Carousel",
    "ChartText": "Chart",
    "CircleText": "Circle",
    "CollapseText": "Collapse",
    "DropdownWidgetText": "DropdownWidget",
    "GroupBoxText": "GroupBox",
    "ListViewText": "ListView",
    "PopoverText": "Popover",
    "QRCodeText": "QRCode",
    "SearchText": "Search",
    "TableText": "Table",
    "TagText": "Tag",
    "TimelineText": "Timeline",
    "TooltipText": "Tooltip",
    "TreeText": "Tree",
    "BarcodeReaderText": "BarcodeReader",
    "CameraText": "Camera",
    "HandwrittenPageText": "Handwritten",
    "Text5": "Message",
    "AlertText": "Alert",
    "ConsoleText": "Console",
    "DialogText": "Dialog",
    "DrawerText": "Drawer",
    "EditDialogText": "EditDialog",
    "MessageText": "Message",
    "ModalText": "Modal",
    "LightText": "Light",
    "PopconfirmText": "Popconfirm",
    "ProgressText": "Progress",
    "SpinnerText": "Spinner",
    "SweetAlertText": "SweetAlert",
    "SearchDialogText": "SearchDialog",
    "ToastText": "Toast",
    "TimerText": "Timer",
    "FullScreenText": "FullScreen"
  },
  "BootstrapBlazor.Shared.Pages.GlobalException": {
    "Title": "Global exception",
    "P1": "Added component <code>BlazorLogger</code> Through this component, global logs and exceptions can be output uniformly; currently, the <code>Blazor</code> framework does not provide a <code>MVC</code> like < b>Global exception</b> The overall solution, for the time being, you need to use <code>try/catch</code> in the code block for exception capture",
    "H1": "Instructions",
    "P2": "1. Add <code>AddLogging</code> to the <code>Startup</code> file to enable the <code>net core</code> system log function",
    "P3": "2. Use <code>BlazorLogger</code> to wrap the content, such as: <code>Body</code> in <code>MainLayout</code>",
    "P4": "3. Use cascading parameters in the code to get examples",
    "P5": "4. Console or <b>IIS</b> output visible log information",
    "Block1Title": "Test",
    "Block1Intro": "This function is to obtain the component instance through the cascade parameter and use its function",
    "P6": "In this example code, an error code that divides by zero is written. Because <code>try/catch</code> is used to capture the exception, the error message is displayed in the console below",
    "ButtonText": "test"
  },
  "BootstrapBlazor.Shared.Pages.Splits": {
    "Title": "Split",
    "Block1Title": "Basic usage",
    "Block1Intro": "Left and Right",
    "Pannel1": "I am the left panel",
    "Pannel2": "I am the right panel",
    "Block2Title": "Set initialization percentage",
    "Block2Intro": "Set the proportion of the initial position by setting the <code>Basis</code> attribute",
    "Block3Title": "Vertical split",
    "Blcok3Intro": "Control the vertical split panel by setting the <code>IsVertical</code> property",
    "Pannel3": "I am the upper panel",
    "Pannel4": "I am the bottom panel",
    "Block4Title": "Nested use",
    "Block4Intro": "Combine layout by nesting <code>Split</code> components",
    "Pannel5": "Upper",
    "Pannel6": "Lower",
    "Pannel7": "Right",
    "Desc1": "style",
    "Desc2": "Percentage of first pane position",
    "Desc3": "First pane template",
    "Desc4": "Second pane template"
  },
  "BootstrapBlazor.Shared.Pages.Dropdowns": {
    "Title": "Dropdown",
    "H1": "Collapse actions or menus into drop-down menus",
    "Block1Title": "Basic usage",
    "Block1Intro": "Use <code>TagName='a'</code> to open a drop-down list with a button tag",
    "Block2Title": "Dropdown empty drop-down menu",
    "Blcok2Intro": "Allow empty <code>Items</code> drop-down menus",
    "Blcok3Title": "Drop-down box with color",
    "Block3Intro": "Provide warning message boxes in various colors. Quote <code>Color='Color.Primary'</code> and other color and style classes to define the appearance of the drop-down menu",
    "Block4Title": "Split button drop-down menu",
    "Block4Intro": "You can create a split drop-down menu with tags similar to a single button drop-down menu, and add ShowSplit='true' (you need to add <code>DropdownType='DropdownType.ButtonGroup </code>') when you use a split component. Insert this symbol as a drop-down The options are handled at appropriate intervals (distance).",
    "Blcok5Title": "Size definition",
    "Block5Intro": "The drop-down menu has a variety of size specifications to choose from <code>Size</code> attributes, including preset and split button drop-down menus.",
    "Block6Title": "Expanding direction",
    "Block6Intro": "Add the style of <code>Direction='Direction.Dropup' </code> to make the drop-down menu expand upward.",
    "Block7Title": "Menu alignment",
    "Block7Intro": "By default, the right side of the drop-down menu is aligned by setting <code>MenuAlignment=Alignment.Right</code>",
    "Block8Title": "Bind data source",
    "Block8Intro": "When you click the button on the right, the menu items in the drop-down box will increase",
    "Button1Text": "Add",
    "Button2Text": "Delete",
    "Block9Title": "Bind data source",
    "Block9Intro": "When you change the options, the menu items in the drop-down box will increase",
    "Block10Title": "Cascade binding",
    "Block10Intro": "By selecting different options in the first drop-down box, the second drop-down box is filled with content dynamically.",
    "ADesc1": "Currently selected value",
    "ADesc2": "Style",
    "ADesc3": "Color",
    "ADesc4": "Drop-down box pop-up direction",
    "ADesc5": "Drop-down box value",
    "ADesc6": "Menu alignment",
    "ADesc7": "Menu item rendering label",
    "ADesc8": "Menu alignment",
    "ADesc9": "Split button drop-down menu (you need to add MenuType='MenuType.Btngroup' when using split component)",
    "ADesc10": "Size",
    "ADesc11": "Label",
    "EDesc1": "Triggered when the value of the drop-down box changes"
  },
  "BootstrapBlazor.Shared.Pages.GoTops": {
    "Title": "GoTop",
    "H1": "Click to return to the top of the specified container",
    "Block1Title": "Basic usage",
    "Block1Intro": "Click to return to the top usage",
    "P1": "The Footer component appears at the bottom, and the page automatically scrolls back to the top when you click Back to the Top",
    "P2": "This example passes the component client ID",
    "Desc1": "The scroll bar component ID controlled by the footer component"
  },
  "BootstrapBlazor.Shared.Pages.Menus": {
    "Title": "Menu",
    "H1": "A list of menus that provide navigation for pages and features.",
    "Tips1": "<code> Menu</code> component is generally used for menu navigation, i.e. redirect navigation by clicking on the address bar after the menu, but sometimes you don't need navigation in real life, by setting <code>OnClick</code> callback delegate, custom processing logic, at this point by setting Property <code> The </code> of TheableNavigation, in this case all <code> Menu </code> are set to <code>true </code> disable navigation because they are analog menu clicks and do not actually navigate the address bar",
    "Block1Title": "Top bar",
    "Block1Intro": "A wide range of basic usages are applicable.",
    "Block2Title": "Bottom bar",
    "Block2Intro": "Set the parameter <code> IsBottom </code> value is <b>true</b> menu bar at the bottom of the container, for the mover",
    "Tips2": "Because the <b> bottom bar menu</b> is relatively positioned relative to the parent container, you need to set the parent node style <code>position-</code>, or customize the style <code> theposition-fixed </code>",
    "Block3Title": "Top bar menu with icon",
    "Block3Intro": "For simple website apps, set the menu icon by setting the menu item <code> the <code> Icon </code> property of the MenuItem </code>",
    "Block4Title": "Sidebar",
    "Block4Intro": "For sites with left and right structure layouts, change the navigation menu to sidebar by setting <code> </code>",
    "Block5Title": "Sidebar menu with icon",
    "Block5Intro": "Set the menu icon by setting the menu item <code> the <code> Icon </code> property of the MenuItem </code>",
    "Block6Title": "Sidebar for accordion effects",
    "Block6Intro": "Set the accordion effect sidebar menu by setting the <code> IsAccordion </code> property",
    "Block7Title": "Sidebar effect with shrink",
    "Block7Intro": "Set the sidebar menu to the put-away state by setting the <code> IsCollapsed </code> property",
    "AlertText": "Note that the <code> IsCollapsed </code> property is available only if the <code> IsVertical </code> is true, i.e. only sidebar menus",
    "P1": "In this example, the layout component <code> Layout </code> is used to build a web page, set the <code> SideWith'0' </code> turn off the sidebar width setting, and use the internal menu width from fit",
    "Block7aTitle": "Click expand to shrink the left menu",
    "Block7Span": "I am the title of the website",
    "Block8Title": "Menu with pendant",
    "Block8Intro": "Set the custom component into the menu by setting the <code>Component </code> property of the MenuItem </code> <code>",
    "Block9Title": "Custom node shrinkage",
    "Block9Intro": "Set whether the node is receding by setting the <code>IsCollapsed </code> property of the <code> MenuItem </code>",
    "P2": "In this example, the <b> permission settings </b> node is expanded and the remaining nodes are in the recess state",
    "Block10Title": "Dynamically change the menu",
    "Block10Intro": "Change the menu item by dynamically setting <code> Theitems </code> property values",
    "Block10Button1": "Update the menu",
    "Block10Button2": "Reset the menu",
    "Block11Title": "Some menus disable functionality",
    "Block11Intro": "Set whether the node is disabled by setting the <code>IsDisabled</code> property of the </code>MenuItem<code>",
    "P3": "In this example<b> navigation two</b> node is disabled and the menu and its submenu are not clickable",
    "b1": "Example of a disablement of the sidebar",
    "Desc1": "A collection of menu component data",
    "Desc2": "Whether it is a sidebar",
    "Desc3": "Whether it is the bottom bar",
    "Desc4": "Whether the accordion effect",
    "Desc5": "Whether to disable address bar navigation",
    "Desc6": "This method is called back when a menu item is clicked",
    "System": "System",
    "Website": "Website",
    "Task": "Task",
    "Authorize": "Authorize",
    "User": "User",
    "Menu": "Menu",
    "Role": "Role",
    "Log": "Log",
    "Access": "Access",
    "Login": "Login",
    "Operation": "Operation",
    "Nav1": "Menu 1",
    "Nav2": "Menu 2",
    "Nav3": "Menu 3",
    "SubMenu1": "Sub Menu 1",
    "SubMenu2": "Sub Menu 2",
    "SubMenu3": "Sub Menu 3",
    "SubMenu11": "Sub Menu 11",
    "SubMenu12": "Sub Menu 12",
    "SubMenu21": "Sub Menu 21",
    "SubMenu22": "Sub Menu 22",
    "SubMenu31": "Sub Menu 31",
    "SubMenu32": "Sub Menu 32",
    "SubMenu41": "Sub Menu 41",
    "SubMenu42": "Sub Menu 42"
  },
  "BootstrapBlazor.Shared.Pages.Navs": {
    "Title": "Nav",
    "H1": "A menu that provides navigation for your site.",
    "Block1Title": "Basic navigation style.",
    "Block1Intro": "In this example, by setting the <code>Items </code> property, the navigation component is assigned through the program api and the <code> NavLink </code> component is written directly to the <code> ChildContext </code> of the navigation component",
    "Block2Title": "Align",
    "Block2Intro": "Control component alignment by setting the property of <code>Signment</code>",
    "Divider": "Split the line",
    "Block3Title": "Vertical",
    "Block3Intro": "In this example, you control whether the navigation is vertically distributed by setting the <code> IsVertical </code> property",
    "Block4Title": "Capsule",
    "Block4Intro": "Control the background color of the navigation menu by setting the <code> IsPills </code> property",
    "Block5Title": "Fill and align",
    "Block5Intro": "By setting the <code> IsFill </code> properties controls that the navigation menu is evenly distributed to fill the entire navigation bar",
    "Block6Title": "Equal width",
    "Block6Intro": "By setting the <code> IsIze </code> property so that each navigation item will have the same width.",
    "Desc1": "Content",
    "Desc2": "Component alignment",
    "Desc3": "Vertical distribution",
    "Desc4": "Capsule",
    "Desc5": "Padding",
    "Desc6": "Equal width"
  },
  "BootstrapBlazor.Shared.Pages.Paginations": {
    "Title": "Pagination",
    "H1": "When there is too much data, use paging to break down the data.",
    "Block1Title": "Basic usage",
    "Block1Intro": "You can select the amount of data displayed per page by the drop-down box",
    "Block2Title": "Only text prompts are displayed",
    "Block2Intro": "Only one page does not display the switch page number component, only text prompts",
    "Block3Title": "Only paginated components are displayed",
    "Block3Intro": "By <code> ShowPaginationInfo = 'false' </code> setting does not display text prompts",
    "Desc1": "The current page number",
    "Desc2": "The amount of data displayed per page",
    "Desc3": "An external data source that displays the amount of data per page",
    "Desc4": "Whether to display paginated data summary information",
    "Desc5": "The total number of data",
    "Event1": "The first argument is the current page number, and the second argument is the number of data items displayed in the current per-page setting",
    "Event2": "Click Set the callback method when displaying the amount of data per page"
  },
  "BootstrapBlazor.Shared.Pages.Stepss": {
    "Title": "Steps",
    "H1": "A navigation bar that guides the user through the process",
    "P1": "Step-by-step navigation bar that guides the user through the process, setting steps of no less than 2 steps based on the actual scenario",
    "p2": "<code> Steps </code> component supports UI rendering by setting the <code>Items </code> property or by embedding the <code> Step </code> component directly",
    "Block1Title": "Basic usage",
    "Block1Intro": "Simple step bar, by directly binding the data source <code>Items </code>",
    "Button1Text": "Next",
    "Button2Text": "Reset",
    "Block2Title": "Basic usage",
    "Block2Intro": "A simple step bar that uses the <code> Step </code> component setup step directly inside the component",
    "Step1Title": "Step 1",
    "Step2Title": "Step 2",
    "Step3Title": "Step 3",
    "Step4Title": "Step 4",
    "Step5Title": "Step 5",
    "StepDesc1": "This is a long descriptive text",
    "StepDesc2": "Conclusion",
    "Block3Title": "There is a description of the step bar",
    "Block3Intro": "Each step described has its own description bar of step status",
    "Block4Title": "Center the step bar",
    "Block4Intro": "Both the title and description will be centered",
    "Block5Title": "Step bar with icon",
    "Block5Intro": "Various custom icons can be enabled within the step bar",
    "AttributeTitle": "StepItem Atributes",
    "Desc1": "Set up a collection of step data",
    "Desc2": "The direction of the display",
    "Desc3": "Center alignment",
    "Desc4": "Set the status of the current step",
    "Att1": "Center alignment",
    "Att2": "Make steps to display using the icon",
    "Att3": "Whether it is the last step",
    "Att4": "Step order number",
    "Att5": "Spacing is not filled in to support the percentage of adaptive spacing",
    "Att6": "The steps display text",
    "Att7": "The step displays an icon",
    "Att8": "Describe the information",
    "Att9": "Set the status of the current step",
    "Att10": "Set up the content template for the current step",
    "Event1": "Call back the delegate when the component state changes"
  },
  "BootstrapBlazor.Shared.Pages.Tabs": {
    "Title": "Tabs",
    "H1": "A collection of data that is associated with the separation content but belongs to a different category.",
    "P1": "Tab components are designed in the form of templates, and this component is used by adding <code> TabItem </code> subcomponents to the <code> tabItems </code> in the template",
    "TipsP": "<code>Tab</code> components are generally used in two ways:",
    "TipsLi1": "Split as data",
    "TipsLi2": "Page navigation",
    "TipsDiv": "The default behavior of this component is data segmentation,Clicking on the <code> TabItem </code> title does not navigate, and if you need to navigate the address bar, set the <code>ClickTabToNavigation </code> property to <code>true </code>，When you click on the <code> TabItem </code> title, the address bar redirects navigation, mostly for the background management system to be used in conjunction with the <code>Menu </code> components，The actual combat can refer to the <code> multi-label </code> mode in the <a href='layout-page' target='_blank'>background template simulator</a>,  When you have <code>Razor Component </code> in the additional Assemblies, set the <code> AdditionalAssemblies </code> property value correctly so that the route within the label component is resolved correctly, and the relevant documentation <a href='https://docs.microsoft.com/zh-cn/aspnet/core/blazor/fundamentals/routing?WT.mc_id-DT-MVP-5004174-view-aspnetcore-3.1-route-to-components-from-multiple-assemblies' target'_blank'>[Portal]</a>",
    "TipsP2": "This component adapts to width height, etc., and scroll arrows can appear left and right or up and down when appropriate",
    "TabItem1Text": "User",
    "TabItem1Content": "I am a user manager",
    "TabItem2Text": "Menu",
    "TabItem2Content": "I am menu management",
    "TabItem3Text": "Roles",
    "TabItem3Content": "I am roles management",
    "TabItem4Text": "Department ",
    "TabItem4Content": "I am department management",
    "TabItem5Text": "System logs",
    "TabItem5Content": "I am a system log",
    "TabItem6Text": "Sign log",
    "TabItem6Content": "I am Sign log management",
    "TabItem7Text": "Timed task",
    "TabItem7Content": "I am a timed task manager",
    "TabItem8Text": "Count",
    "TabItem9Text": "Weather forecast",
    "Block1Title": "Basic usage",
    "Block1Intro": "Basic, concise tabs.",
    "Blcok2Title": "Tab style ",
    "Block2Intro": "Set tab-style tabs by <code> isCard='true' </code>.",
    "Block3Title": "Carding",
    "Block3Intro": "Set tab-style tabs by <code>IsBorderCard='true'</code>.",
    "Block4Title": "Icon",
    "Block4Intro": "Set the tab icon by setting the <code> Icon </code> property of the <code>TabItem</code> component",
    "Block5Title": "Close",
    "Block5Intro": "Show the close button to the tab by setting the <code> ShowClose </code> property",
    "Tips2": "<p><code> Tab </code> component turns on the <code>showClose </code> , <code> TabItem </code> property <code>Closable</code> can be set individually to close tab, <b>defaulting to </b><code> true </code>;In this example <b> User </b> Tabs do not provide a to turn off functionality</p>",
    "Block6Title": "Position",
    "Block6Intro": "By setting the <code>Placement </code> property to change the label position, a small arrow scrolls up and down to <code> TabItem </code> switch when you change to left or right",
    "DividerText": "Split Line",
    "Block7Title": "Custom add tab triggers",
    "Block7Intro": "Dynamically add/remove <code> TabItem </code> by calling the component api",
    "AddButtonText": "Add",
    "RmoveButtonText": "Rmove",
    "ActiveButtonText": "Activate the first one",
    "Block8Title": "Additional components are built in",
    "Block8Intro": "other components are built into the <code>TabItem </code>",
    "P2": "<code>Tab</code> The contents of each panel of the component remain state by default, and in this case the original data is maintained when the panel switches",
    "Block9Title": "The program dynamically adds the TabItem panel",
    "Block9Intro": "This feature allows you to click on the menu link in the sidebar and render multiple labels at the top of the data area on the right",
    "P3": "In this example, the right the <code> Tab </code> the inside of the panel remains in state, and the component reloads when it is closed and reopened",
    "Block9Div": "Header",
    "Block10Title": "Live Tab components",
    "Block10Intro": "By setting  the <code>ShowExtendButtons </code> property to <code>true</code>, turning on the left and right buttons of the component and closing the drop-down menu, it is very useful in practice",
    "Tips3": "Dynamically adjust the number of <code> TabItem </code> by  <b> adding </b> , <b> delete </b> buttons  to view the left and right effects beyond the number of containers, <b> user management </b> is set to not close, and the feature button cannot close this tab",
    "Block11Title": "Only the current label is rendered",
    "Block11Intro": "By setting the <code> isOnlyRenderActiveTab </code> parameter, the component renders only the current active label",
    "Att1": "Whether it is a bordered card style",
    "Att2": "Whether it is a card style",
    "Att3": "Whether to render only Active labels",
    "Att4": "Whether to display the close button",
    "Att5": "Whether to display the extension button",
    "Att6": "Whether to navigate when you click on the title",
    "Att7": "Set the label position",
    "Att8": "Set the label height",
    "Att9": "TabItem collection",
    "Att10": "ChildContent template",
    "Att11": "A collection of additional programs to initialize the route",
    "Att12": "Call back the delegate method when you click on the TabItem title",
    "Att13": "Set the tab to display the title collection, and when not set, an internal attempt is made to use menu item data",
    "Method1": "Add TabItem to Tab",
    "Method2": "Remove TabItem",
    "Method3": "The setting specifies tabItem as active",
    "Method4": "Switch to the previous label method",
    "Method5": "Switch to the next label method",
    "Method6": "Close the current tab method",
    "Method7": "Close other tab methods",
    "Method8": "Close all tab methods",
    "Method9": "Get current tab methods",
    "BackAddTabText": "I am a new Tab with the name {0}",
    "BackText1": "Counter",
    "BackText2": "Weather forecast",
    "AttTitle": "Attributes",
    "MethodTitle": "Method"
  },
  "BootstrapBlazor.Shared.Pages.AutoCompletes": {
    "Title": "AutoComplete",
    "H1": "The input box autocompletes the function",
    "Block1Title": "Basic usage",
    "Block1Intro": "By setting <code>Items </code> data collection when the user types information that is automatically displayed",
    "P1": "In this example, type 123 strings to display the viewing effect, automatically give the component initialization to the auto-prompt dataset, and the dataset does not change",
    "Block2Title": "Blur queries and ignore case",
    "Block2Intro": "By setting the <code> IsLikeMatch </code> value settings to turn on fuzzy matching of collections, you control whether case is ignored by setting the <code>IgnoreCase </code>",
    "P2": "In this example, type the abc string to display the viewing effect and select all matches in the collection that contain abc and have the same case",
    "Block3Title": "Custom prompt message",
    "Block3Intro": "By setting the <code> NoDataTip </code> value setting automatically completes the custom prompt message that appears when the data is not found",
    "P3": "In this example, type 567 strings because the autocomplete information center does not display custom prompt information - <code> the data you want is not found </code>",
    "AutoTip": "There is nothing",
    "Block4Title": "Custom candidates",
    "Block4Intro": "By setting up <code>ValueChanged </code> callback method reorganizes the data collection based on the data entered by the user before prompting for information",
    "P4": "In this example, type any string to display the viewing effect, and automatically complete the component's dynamic changes from the newly obtained prompt dataset based on the string you type",
    "Block5Title": "The label is displayed",
    "Block5Intro": "When a component binds in both directions, it automatically determines whether label text is displayed based on the conditions",
    "P5": "The pre-label explicit rules are consistent with the <code> BootstrapInput </code> component of the <a href='inputs'>[portal]</a>",
    "Divider1Text": "Bidirectional binding displays labels",
    "Divider2Text": "Bidirectional bindings do not display labels",
    "Divider3Text": "Customize DisplayText",
    "AutoText": "Custom city",
    "Att1": "whether to display the front label",
    "Att2": "content",
    "Att3": "content",
    "Att4": "Prompt information when no matches are automatically completed",
    "Att4DefaultValue": "No matching data",
    "Att5": "The number of data displayed when the data is matched",
    "Att6": "Call back the delegate method when the text box value changes",
    "Att7": "whether to turn on fuzzy matching",
    "Att8": "whether case is ignored when matching",
    "Att9": "custom collection filtering rules"
  },
  "BootstrapBlazor.Shared.Pages.FullScreens": {
    "Title": "FullScreen",
    "H1": "Human-computer interaction by injecting service calls <code> Show </code> method pop-ups",
    "Tips": "This component provides functionality in the form of injection services, the user experience is very comfortable to use, anytime, anywhere calls, need to be built into the page using this component <code> FullScreen </code> component, or in the main layout component of <code> MainLayout</code>, the sample code is as follows:",
    "Block1Title": "Basic usage",
    "Block1Intro": "The entire page is fully screened by calling the <code>Show </code> method that <code> FullScreenService </code> service instance",
    "ButtonText1": "FullScreen",
    "Block2Title": "Button",
    "Block2Intro": "The full screen of the entire web page is component <code> FullScreenButton</code>",
    "Li1": "The button default icon can be set through the <code> ButtonIcon </code>, and the full-screen icon can be set through the <code>FullScreenIcon </code> property",
    "Li2": "Use the <code>Title</code> property to set the prompt bar text when the mouse hovers",
    "Button1Text": "Tap for a full screen operation",
    "Pre": "FullScreenButton Title='Click for full screen operation'"
  },
  "BootstrapBlazor.Shared.Pages.Buttons": {
    "Title": "Button",
    "H1": "Common action buttons.",
    "Button1Text": "Primary",
    "Button2Text": "Secondary",
    "Button3Text": "Success",
    "Button4Text": "Danger",
    "Button5Text": "Warning",
    "Button6Text": "Information",
    "Button7Text": "Dark",
    "Button8Text": "Highlight",
    "Button9Text": "Link",
    "Button10Tetx": "Ultra-small",
    "Button11Text": "Small",
    "Button12Text": "Button",
    "Button13Text": "Medium",
    "Button14Text": "Big",
    "Button15Text": "Oversized",
    "Button16Text": "Block",
    "Block1Title": "Basic usage",
    "Block1Intro": "The underlying button usage.",
    "Block2Title": "Different styles",
    "Block2Intro": "Display different button styles by setting the <code> ButtonStyle </code>",
    "Block3Title": "Outline",
    "Block3Intro": "Set the color style of the button border by setting the <code>IsOutline='true'</code>.",
    "Block4Title": "Different sizes.",
    "Block4Intro": "The Button component provides a variety of sizes in addition to the default values, and by setting the <code> Size </code> property, you can select the appropriate button size in different scenarios.",
    "Block5Title": "Disable the state",
    "Block5Intro": "Button is not available. By setting the <code> IsDisabled </code> property",
    "P1": "Button disable effects can be achieved by setting its own <code>IsDisabled </code> property in the <code>OnClick </code> callback method, or by calling the component instance method <code> SetDisable </code>",
    "P2": "Because using the <code>IsDisabled </code> property requires an explicit manual call to the <code>StateHasChanged </code> method, which causes the component where the button is located to refresh as a whole, it is recommended that you use the instance method <code> SetDisable </code> refresh the button only",
    "b1": "Performance comparison:",
    "Li1": "This page transfer is <code>4.8K</code> when set with the <code>IsDisabled </code> property",
    "Li2": "This page transfer is <code>280B</code> when set up using the <code>SetDisable </code> method",
    "Button17Text": "Click to be disabled",
    "Button23Text": "Click to make the first button available",
    "TooltiTitle": "Tooltip is destroyed when the button is clicked",
    "Block6Title": "Button group",
    "Block6Intro": "A combination of multiple buttons",
    "Button18Tetx": "Button one",
    "Button19Text": "Button two",
    "Block7Title": "Button with icon",
    "Block7Intro": "Set the button icon by setting the <code> Icon </code> property, which is <code> fa-fa </code> when using font strings such as the <code>font-awesome </code> icon",
    "Button20Text": "Status button",
    "Button21Text": "Progress button",
    "Block8Title": "Secondary encapsulation button",
    "Block8Intro": "The button display text is set by setting the <code>Text </code> property of the <code>winButton</code> component, and the click button is the text on the right that shows the clicked button",
    "Block9Title": "Asynchronous request button",
    "Block9Intro": "By setting whether the <code> isAsync </code> property button is <b> asynchronous request button by setting whether the is </b>  <code> false </code> by default",
    "P3": "When the button is an asynchronous request button, the button is changed to disabled, and the <code>loading </code> small icon is displayed, returning to normal after the asynchronous request ends, in this case, after clicking  <b> the asynchronous request </b> button, the request load animation is displayed and returns to normal after 5 seconds",
    "Button22Text": "Asynchronous",
    "EventDesc1": "This event is triggered when the button is clicked",
    "EventDesc2": "This event is triggered when the button is clicked and the current component is not refreshed for performance improvement",
    "Att1": "color",
    "Att2": "icon",
    "Att3": "An animated icon when loaded asynchronously",
    "Att4": "displays text",
    "Att5": "size",
    "Att6": "style",
    "Att7": "fill button",
    "Att8": "whether to disable it",
    "Att9": "whether there is a border",
    "Att10": "whether it is an asynchronous button",
    "Att11": "content",
    "Att12": "button style",
    "Att13": "The type of button",
    "MethodDesc1": "set whether the button is available"
  },
  "BootstrapBlazor.Shared.Pages.Cascaders": {
    "Title": "Cascader",
    "Block1Title": "Cascade selection",
    "Block1Intro": "Drop-down selection boxes are available in a variety of colors",
    "Block2Title": "Turn off cascading selection",
    "Block2Intro": "Cascading selection is not available",
    "Block3Title": "Two-way binding",
    "Block3Intro": "The values in the text box change when you change the cascading selection option by binding the <code>Value </code> property with the <code>Select </code> component.",
    "Block4Title": "Client validation",
    "Block4Intro": "When cascading selection is not selected, click the submit button to block.",
    "ButtonText": "Submit",
    "Block5Title": "The binding generic is the Guid structure",
    "Block5Intro": "The component binding value is an example of a Guid structure",
    "Block6Title": "The label is displayed",
    "Block6Intro": "When a component binds in both directions, it automatically determines whether label text is displayed based on the conditions",
    "P1": "The pre-label explicit rules are consistent with the <code> BootstrapInput </code> component of the <a href='inputs'>[portal]</a>",
    "Divider1": "Bidirectional binding displays labels",
    "Divider2": "Bidirectional bindings do not display labels",
    "Divider3": "Customize DisplayText",
    "CascaderText": "Custom city",
    "Att1": "Whether to display the front label",
    "Att2": "The front label displays text",
    "Att3": "The place-in display text when not selected",
    "Att3Default": "Click to select ...",
    "Att4": "Style",
    "Att5": "Color",
    "Att6": "Whether to disable it",
    "Att7": "The data collection",
    "Event1": "This event is triggered when the cascading selection option changes"
  },
  "BootstrapBlazor.Shared.Pages.Checkboxs": {
    "Title": "Checkbox",
    "H1": "Multiple-select in a set of alternatives",
    "StatusText1": "Selected",
    "StatusText2": "Not selected",
    "Block1Title": "Basic usage",
    "Block1Intro": "Using alone can represent a switch between two states, and column head or header can represent a switch between three states when used. Components support generic data binding, setting the binding data type the <code>TValue </code>, and setting the component state by <code> State </code>",
    "Block2Title": "Disable the check box",
    "Block2Intro": "Check box is not available, and the <code>IsDisabled </code> is set by whether the component is available",
    "Block3Title": "Color",
    "Block3Inrto": "Change the component background color by setting the <code>Color </code> property",
    "Block4Title": "Size",
    "Block4Intro": "Change the component size by setting the <code>Size </code> property",
    "Block5Title": "Label text",
    "Block5Intro": "The check box displays text, and the component status flips when you tap display text, using the <code> DisplayText </code> settings component to display text",
    "P1": "Set <code>DisplayText</code> property, or display text messages through bidirectional binding",
    "Checkbox1Text": "Displays text",
    "Block6Title": "Two-way binding boolean",
    "Block6Intro": "Binding variables within a component, data automatically synchronized, binding data types <code> boolean </code> type when the value is automatically flipped",
    "Checkbox2Text": "Two-way binding",
    "Block7Title": "Bind string data in both directions",
    "Block7Intro": "Binding variables within a component, data is automatically synchronized",
    "Block8Title": "Used in forms",
    "Block8Intro": "When you use <code>Checkbox </code> in a form, the display label text is placed in front of the component",
    "P2": "The pre-label explicit rules are consistent with the <code> BootstrapInput </code> component <a href='inputs'>[portal]</a>",
    "Checkbox3Text": "Handwritten labels",
    "Att1": "Whether to display the front label",
    "Att2": "Whether to display the rear label",
    "Att3": "The front label displays text",
    "Att4": "Whether to disable it",
    "Att5": "The type of control",
    "Event1": "This method is called back when the selection box state changes",
    "Event2": "The state changes the callback method"
  },
  "BootstrapBlazor.Shared.Pages.CheckboxLists": {
    "Title": "CheckboxList",
    "H1": "The control is used to create a multi-select check box group",
    "Blok1Title": "Basic usage",
    "Block1Intro": "Show check box groups by data binding",
    "P1": "Instructions:",
    "Li1": "Set bidirectional binding data value through <code>bind-Value</code >",
    "Li2": "Set candidate data sources through <code> Items </code>",
    "Li3": "Get the changed item instance through the <code> onSelectedChanged </code> callback method",
    "Block2Title": "Client Validation",
    "Block2Intro": "Built in validateform",
    "P2": "You can experience adaptive layout by changing the window size",
    "P3": "In this example, the <code>Name</code> field of the binding model <code>binditem</code> is automatically changed by checking the option",
    "P4": "Because it is built into the <code>ValidateForm</code> form, in this example, <code>RequiredAttribute</code> required for verification is added. When all options are cancelled, the verification result will be prompted",
    "Block3Title": "Bidirectional binding collection",
    "Block3Intro": "Binding values are collections",
    "P5": "Tvalue is set to <code>IEnumerable&lt;int&gt;</code> generic collection, the <Code>ValueField</Code> specified field of the bound collection must be consistent with the generic type",
    "P6": "TValue is set to <code>IEnumerable&lt;string&gt;</code> generic collection",
    "Block4Title": "Bidirectional binding enumeration",
    "Block4Intro": "The binding value is enumeration",
    "P7": "When <code> CheckboxList </code> binds an enumeration set, <code> Items </code> does not need to be specified, <code> Items </code> will be automatically set to all values in the enumeration. If you need to bind some values, please provide the enumeration set <code> Items </code>",
    "Block5Title": "No border",
    "Block5Intro": "By setting <code> ShowBorder='false' </code> do not display borders",
    "P8": "Displays a red border when validation fails",
    "Block6Title": "Vertical arrangement",
    "Block6Intro": "Arrange checkboxes vertically by setting <code> IsVertical = 'true' </code >",
    "Block7Title": "Disable",
    "Block7Intro": "Disable by setting <code> IsDisabled='true' </code>",
    "Att1": "Data source",
    "Att2": "Disable",
    "Att3": "Component values are used for bidirectional binding",
    "Att4": "Whether to arrange vertically",
    "Event1": "Call back this method when the state of the check box changes"
  },
  "BootstrapBlazor.Shared.Pages.ColorPickers": {
    "Title": "ColorPicker Color Picker",
    "H1": "Select color to use",
    "Block1Title": "Basic Usage",
    "Block1Intro": "Set the color value by setting the <code>Value</code> property",
    "Block2Title": "Set Initial Value",
    "Block2Intro": "Set the color value by setting the <code>Value</code> property",
    "P1": "Set <code>Value='@Value2'</code> to initialize the default value",
    "Block3Title": "Two-way binding",
    "Block3Intro": "Set the color value by setting the <code>Value</code> property",
    "Block4Title": "Disabled",
    "Block4Intro": "Disable this component by setting the <code>IsDisabled</code> property",
    "Block5Title": "Used in the verification form",
    "Block5Intro": "Built in <code>ValidateForm</code> to use",
    "Event1": "Color change callback delegate method"
  },
  "BootstrapBlazor.Shared.Pages.DateTimePickers": {
    "Title": "DatePicker",
    "H1": "Used to select or enter a date",
    "Block1Title": "Select the day",
    "Block1Intro": "Select the control based on the date of the day in 「day」as the base unit",
    "Block2Title": "Select any point in time",
    "Block2Intro": "You can choose any time",
    "Block3Title": "Data is bound in both directions",
    "Block3Intro": "Click the confirm button to select the box value consistent with the text box value",
    "codetext": "type",
    "Blcok4Title": "Client validation",
    "Block4Intro": "Check data validity and prompt automatically based on custom validation rules",
    "Block5Title": "Click on the pop-up date box",
    "Block5Intro": "Select the control based on the date of the day in 「day」 as the base unit",
    "Block6Title": "Data is bound in both directions",
    "Block6Intro": "The values in the text box change as the date component time changes",
    "Block7Title": "Selector with time",
    "Block7Intro": "Select the date and time in the same selector, click the confirm button and close the pop-up window",
    "P1": "Set the value of the <code>viewModel</code> property to The <code> DateTime </code> of DatePickerViewModel.DateTime",
    "Block8Title": "Allow empty time",
    "Blcok8Intro": "More for conditional selection",
    "P2": "The <b> empty </b> button automatically appears when the binding value is <code> DateTime?</code> for an empty type",
    "Block9Title": "The label is displayed",
    "Block9Intro": "When you are a form component, the label in front of the component is displayed",
    "P3": "Set the <code> DisplayText </code> property value to <code> select time </code>",
    "P4": "The pre-label explicit rules are consistent with the <code> BootstrapInput </code> component  of the <a href='inputs'>[portal]</a>",
    "DisplayText": "Select the time",
    "Block10Title": "disable",
    "Block10Intro": "When you set the <code>IsDisabled</code> property value to <code>true</code>, the component suppresses input",
    "Block11Title": "Sidebar with shortcuts",
    "Block11Intro": "When you set the <code>ShowSidebar</code> property value to <code>true</code>, the component displays the shortcut sidebar",
    "Block12Title": "Set the range of values",
    "Block12Intro": "Set the <code>MinValue </code> property value to the <code> MaxValue </code> limit the range of optional values, in this case setting the range to <b> 45 </b> days",
    "Att1": "Whether to display the front label",
    "Att2": "Whether to display the shortcut sidebar",
    "Att3": "The front label displays text",
    "Att4": "Date format string The default is yyyyy-MM-dd",
    "Att5": "Whether to display this component",
    "Att6": "Whether to disable Fasle by default",
    "Att7": "Time format string The default is hh:mm:ss",
    "Att8": "The value of the component is a two-way binding with ValueChanged",
    "Att9": "Get/Set Component Display Mode The default is the month-to-day display mode",
    "Event1": "Confirm that the button calls back the delegate",
    "Event2": "Callback delegates are used for bidirectional binding when component values change",
    "Log1Text": "The date selected is",
    "Log2Text": "The time selected is",
    "SubmitText": "Save",
    "ModelValidateValue": "ModelValidateValue",
    "ModelValidateValue.Required": "{0} is required."
  },
  "BootstrapBlazor.Shared.Pages.Editors": {
    "Title": "Editor",
    "H1": "Convert the entered text into <code>html</code> code snippets",
    "P1": "The <code>Editor</code> component is a secondary package of <a href='https://summernote.org/' target='_blank'><code>Summernote component</code></a>, such as If you need to use the localization function, please download the corresponding language pack from the official website and quote it by yourself",
    "Block1Title": "Basic usage",
    "Block1Intro": "The default rendering is <code>div</code> and it becomes a rich text edit box when clicked",
    "P2": "Set the <code>IsEditor</code> attribute value to control whether the component defaults to <code>div</code> or <code>editor</code>",
    "Div1": "I am a normal <code>div</code> click and can’t edit",
    "Block2Title": "Custom prompt message",
    "Blcok2Intro": "The prompt message when a null value is set by setting the <code>Placeholder</code> attribute",
    "P3": "The default prompt is <b>Edit after clicking</b>",
    "Placeholder1": "Customize the prompt message for empty values",
    "Block3Title": "Display as a rich text edit box by default",
    "Block3Intro": "Set the component to be directly displayed as a rich text edit box by setting the <code>IsEditor</code> property",
    "Block4Title": "Custom height",
    "Block4Intro": "Set the height of the component by setting the <code>Height</code> property",
    "Block5Title": "Two-way binding",
    "Block5Intro": "In actual combat, two-way binding to <code>Value</code> automatically obtains the editing content of the client's rich text box in the background",
    "P4": "Use <code>bind-Value</code> to bind the backend properties of <code>EditorValue</code> in two ways. After editing in the edit box, click the <b>Finish</b> button, and then enter the text box below. Show edited result",
    "Label1": "Show edit content:",
    "Block6Title": "Customize the extended edit box button",
    "Blcok6Intro": "Customize the extension of the edit box toolbar by setting the <code>CustomerPluginItems</code> property, and do the function by setting the <code>OnClickPluginItem</code> callback delegate",
    "P5": "In this example, two buttons are added to the toolbar by extending the <code>CustomerPluginItems</code> property. Click the button to pop up the <code>SweetAlert</code> modal box, click the modal box confirmation button and insert the text box A piece of content",
    "Block7Title": "Customize the rich text edit box of the toolbar",
    "Block7Intro": "Customize the toolbar content by setting the <code>ToolbarItems</code> property. For the currently supported toolbar values, please refer to <a href='https://summernote.org/' target='_blank'>Summernote</a> Official website",
    "P6": "In this example, by setting the <code>ToolbarItems</code> property, the default available toolbar buttons are changed",
    "Att1": "Prompt message when the value is empty",
    "Att1DefaultValue": "Click to edit",
    "Att2": "Whether to directly display as a rich text edit box",
    "Att3": "Component height",
    "Att4": "Rich Text Box Toolbar Tool",
    "Att5": "Custom button",
    "InitValue": "Initial value <b>Test</b>",
    "UpdateValue": "Changed value",
    "ToolTip1": "This is the tip of plugin1",
    "ToolTip2": "This is the tip of plugin2",
    "Swal1Title": "A pop-up window will pop up after clicking the plugin1 button",
    "Swal1Content": "After clicking the plug-in button, the window will pop up and confirm before proceeding to the next step.",
    "Ret1": "<div class='text-danger'>Data returned from plugin1</div>",
    "Swal2Title": "After clicking the plugin2 button, a pop-up window will appear",
    "Swal2Content": "After clicking the plug-in button, the window will pop up and confirm before proceeding to the next step.",
    "Ret2": "Data returned from plugin2"
  },
  "BootstrapBlazor.Shared.Pages.EditorForms": {
    "Title": "EditorForm",
    "H1": "Edit forms are automatically rendered through the bound data model",
    "P1": "<code> EditorForm</code> component is a very useful component that, when editing data, simply assigns the <code> Model </code> property.",
    "Li1": "The binding model automatically generates all properties by default, and you can change to not automatically build by setting <code> AutoGenerateAllItem </code>",
    "Li2": "If you don't need to edit the columns, set the <code> Editable </code>, the default is <code>true </code> build editing components",
    "Li3": "Complex edit columns, set up <code> EditTemplate </code> templates, and edit custom components",
    "Li4": "The buttons in the form can be set up multiplely, just set the buttons <code> Buttons </code> template",
    "Block1Title": "Basic usage",
    "Block1Intro": "By binding <code> TModel </code> data model, editable forms for individual fields of the model are automatically generated",
    "P2": "Directly bind the model <code> model </code>, setting the <b> Education </b> <b>complete </b> field not to appear",
    "GroupBox1": "An example of a form",
    "ButtonText": "Submit",
    "Block2Title": "Turn on data validation",
    "Block2Intro": "Data compliance checks are implemented through nested <code> ValidateForm </code> components",
    "P3": "The component is built into the <code>ValidateForm </code> to turn on data compliance checks, and <b> hobby </b> fields use the <code>EditTemplate </code> template to customize the component to render the data",
    "P4": "Make the <code> birthday </code> field read-only by setting the <code>Readonly </code> property",
    "GroupBox2": "An example of a form",
    "Block3Title": "It is not automatically generated by default",
    "Block3Intro": "By setting the property <code> AutoGenerateAllItem </code> value of <code>false</code> the property is prohibited from being automatically generated, and the display property is controlled by setting the <code> FieldItems </code> internal collection",
    "GroupBox3": "An example of a form",
    "P5": "In this example, by setting <code> the autoGenerate AllItem </code> value to <code>false </code>, turning off auto-generation, and rendering the form editing by manually adding two <code> EditoItem </code> edits",
    "Block4Title": "The components within the form component bind fields that are not model-independent",
    "Block4Intro": "By setting the property <code> AutoGenerateAllItem </code> value of <code>false</code> the property is prohibited from being automatically generated, and the display property is controlled by setting the <code> FieldItems </code> internal collection",
    "GroupBox4": "An example of a form",
    "P6": "In some cases, the value of some columns in the form may be a secondary classification, etc., and you need to know the information for a level 1 classification, at which point the first-level classification requires additional components to render if <code> Select </code>, which is independent of the current context binding model <code> Model </code>, which requires that you set the <code>SkipValidate </code> value to <code>true </code>, turn off model validation for this component",
    "Blcok5Title": "Set the number of controls displayed per row",
    "Block5Intro": "Control the layout by setting the property values <code> </code>ItemsPerRow",
    "P7": "This example sets <code>ItemsPerRow=3</code> show 3 components per row",
    "GroupBox5": "An example layout",
    "Block6Title": "Custom rendering component types",
    "Block6Intro": "Control the rendering component type by setting the <code>CompnentType </code> property values",
    "Li5": "<code>inline </code> layout mode aligns the labels in the form right by setting the </code> <code>LabelAlign''Alignment.Right'",
    "Li6": "<code> Buttons </code> template you can nest <code> div </code> and style <code>text-end </code> align the right side of the button",
    "TestName": "Tom",
    "TestAddr": "The test address",
    "AttrAttributeTitle": "EditorItem Attribute",
    "Att1": "The currently bound data model",
    "Att2": "Bind column templates",
    "Att3": "Button template",
    "Att4": "Whether to display label",
    "Att5": "Whether to generate all properties",
    "Att6": "The number of components is displayed per row",
    "Att7": "Set how components are laid out",
    "Att8": "Label alignment in Inline layout mode",
    "Att9": "The current bound data value",
    "Att10": "Binding column data types",
    "Att11": "Whether to allow editing",
    "Att12": "Whether to read only",
    "Att13": "Edit the column's front label name",
    "Att14": "Column editing template"
  },
  "BootstrapBlazor.Shared.Pages.Components.Block": {
    "Title": "",
    "SubTitle": "Demo"
  },
  "BootstrapBlazor.Shared.Pages.Components.Tips": {
    "Title": "Tips"
  },
  "BootstrapBlazor.Shared.Pages.Components.AttributeTable": {
    "Title": "Attributes"
  },
  "BootstrapBlazor.Shared.Pages.Components.MethodTable": {
    "Title": "Methods"
  },
  "BootstrapBlazor.Shared.Common.AttributeItem": {
    "Name": "Parameter",
    "Description": "Description",
    "Type": "Type",
    "ValueList": "ValueList",
    "DefaultValue": "DefaultValue"
  },
  "BootstrapBlazor.Shared.Common.EventItem": {
    "Name": "Parameter",
    "Description": "Description",
    "Type": "Type"
  },
  "BootstrapBlazor.Shared.Common.MethodItem": {
    "Title": "Methods",
    "Name": "Parameter",
    "Description": "Description",
    "Type": "Type",
    "Parameters": "Parameters",
    "ReturnValue": "ReturnValue"
  },
  "BootstrapBlazor.Shared.Shared.ComponentLayout": {
    "Title": "Enterprise-level component library based on Bootstrap and Blazor",
    "Example": "Example",
    "Video": "Video"
  },
  "BootstrapBlazor.Shared.Pages.Alerts": {
    "Title": "Alert",
    "SubTitle": "Displays important alert messages.",
    "BaseUsageText": "Basic usage",
    "IntroText1": "Alert components are non-overlay elements in the page that does not disappear automatically.",
    "AlertPrimaryText": "A simple primary alert—check it out!",
    "AlertSecondaryText": "A simple secondary alert—check it out!",
    "AlertSuccessText": "A simple success alert—check it out!",
    "AlertDangerText": "A simple danger alert—check it out!",
    "AlertWarningText": "A simple warning alert—check it out!",
    "AlertInfoText": "A simple info alert—check it out!",
    "AlertDarkText": "A simple dark alert—check it out!",
    "CloseButtonUsageText": "Close button",
    "IntroText2": "Customize the close button as texts or other symbols.",
    "WithIconUsageText": "With Icon",
    "IntroText3": "Displaying an icon improves readability.",
    "ShowBarUsageText": "With Bar",
    "IntroText4": "Show <code>Tip</code>"
  },
  "BootstrapBlazor.Shared.Pages.Selects": {
    "PlaceHolder": "Not Select"
  },
  "BootstrapBlazor.Shared.Pages.QRCodes": {
    "Title": "QRCode",
    "SubTitle": "Generate QR code",
    "BaseUsageText": "Basic usage",
    "IntroText1": "Click the Generate button to generate a <code>QRCode</code>",
    "SuccessText": "QR code generated successfully",
    "CallbackDescription": "Call back after QR code generation"
  },
  "BootstrapBlazor.Shared.Pages.Anchors": {
    "Title": "Anchor",
    "SubTitle": "Hyperlinks to scroll on one page.",
    "BaseUsageText": "Basic usage",
    "IntroText1": "For displaying anchor hyperlinks on page and jumping between them.",
    "IntroText2": "Click <code>Anchor</code> item try it",
    "ContentText1": "<p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p><p>Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.</p><p>Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.</p><p>Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.</p>",
    "Desc1": "Anchor Target Id",
    "Desc2": "Id of the element where the scroll bar is located",
    "Desc3": "The offset is used to adjust the gap use",
    "Desc4": "Content"
  },
  "BootstrapBlazor.Shared.Pages.Breadcrumbs": {
    "Title": "Breadcrumb",
    "H1": "Display the path of the current page and quickly return to any previous page.",
    "Blcok1Title": "Basic usage",
    "Blcok1Intro": "Suitable for a wide range of basic usage."
  },
  "BootstrapBlazor.Shared.Pages.Components.Foo": {
    "Name": "Name",
    "DateTime": "DateTime",
    "Address": "Address",
    "Count": "Count",
    "Complete": "Complete",
    "Education": "Education",
    "Hobby": "Hobby",
    "Name.Required": "{0} is required.",
    "Address.Required": "{0} is required.",
    "Education.Required": "{0} is required.",
    "Hobby.Required": "{0} is required.",
    "Name.PlaceHolder": "required",
    "Hobbys": "Swimming,Climb,Shoot,Chess",
    "Foo.Name": "Zhangsan {0}",
    "Foo.Address": "Lane {0} of Jinshajiang Road, Putuo District, Shanghai",
    "Foo.Address2": "Earth, China, Lane {0} of Jinshajiang Road, Putuo District, Shanghai. Here is an example of super long cell",
    "Foo.BindValue": "BindValue",
    "True": "Pass",
    "False": "Failed",
    "NullItemText": "Not Set"
  },
  "BootstrapBlazor.Shared.Pages.ValidateForms.ComplexFoo": {
    "Name": "Name",
    "Name.Required": "{0} is required."
  },
  "BootstrapBlazor.Shared.Pages.ValidateForms.Dummy2": {
    "Name": "Name",
    "Name.Required": "Dummy2 {0} is required"
  },
  "BootstrapBlazor.Shared.Pages.Components.EnumEducation": {
    "PlaceHolder": "Click to select ...",
    "Primary": "Primary",
    "Middel": "Middel"
  },
  "BootstrapBlazor.Shared.Pages.Inputs": {
    "PlaceHolder": "please input ..."
  },
  "BootstrapBlazor.Shared.Pages.Components.ThemeChooser": {
    "Title": "Click to choose theme",
    "HeaderText": "Themes"
  },
  "BootstrapBlazor.Shared.Pages.Uploads.Person": {
    "Name": "Name",
    "Name.Required": "{0} is required",
    "Picture": "File",
    "Picture.Required": "{0} is required"
  },
  "BootstrapBlazor.Shared.Pages.Components.CultureChooser": {
    "Label": "Language："
  },
  "BootstrapBlazor.Shared.Shared.BaseLayout": {
    "DownloadText": "Download",
    "HomeText": "Home",
    "IntroductionText": "Documents",
    "ComponentsText": "Components",
    "FlowText": "Workflow",
    "InstallAppText": "Install PWA App",
    "InstallText": "Install",
    "CancelText": "Cancel",
    "Title": "View update log"
  },
  "BootstrapBlazor.Shared.Shared.NavMenu": {
    "GetStarted": "GETTING STARTED",
    "Introduction": "Introduction",
    "Install": "Install",
    "ProjectTemplate": "Template",
    "Globalization": "Globalization",
    "Localization": "Localization",
    "ServerBlazor": "Server-side Blazor",
    "ClientBlazor": "Client-side Blazor",
    "Labels": "Labels",
    "Theme": "Theme",
    "GlobalException": "Global Exception",
    "LayoutPage": "LayoutPage",
    "Components": "COMPONENTS",
    "Client": "WebClientService",
    "LayoutComponents": "LAYOUTS",
    "Divider": "Divider",
    "Layout": "Layout",
    "Footer": "Footer",
    "Row": "Row",
    "Scroll": "Scroll",
    "Skeleton": "Skeleton",
    "Split": "Split",
    "NavigationComponents": "NAVIGATIONS",
    "Anchor": "Anchor",
    "AnchorLink": "AnchorLink",
    "Breadcrumb": "Breadcrumb",
    "Dropdown": "Dropdown",
    "GoTop": "GoTop",
    "Menu": "Menu",
    "Nav": "Nav",
    "Pagination": "Pagination",
    "Steps": "Steps",
    "Tab": "Tab",
    "NotificationComponents": "NOTIFICATIONS",
    "Alert": "Alert",
    "Console": "Console",
    "Dialog": "Dialog",
    "Drawer": "Drawer",
    "EditDialog": "EditDialog",
    "FullScreen": "FullScreen",
    "Message": "Message",
    "Modal": "Modal",
    "Light": "Light",
    "Popconfirm": "Popconfirm",
    "Progress": "Progress",
    "SearchDialog": "SearchDialog",
    "Spinner": "Spinner",
    "SweetAlert": "SweetAlert",
    "Timer": "Timer",
    "Toast": "Toast",
    "FormsComponents": "FORMS",
    "AutoComplete": "AutoComplete",
    "Button": "Button",
    "Cascader": "Cascader",
    "Checkbox": "Checkbox",
    "CheckboxList": "CheckboxList",
    "ColorPicker": "ColorPicker",
    "DateTimePicker": "DateTimePicker",
    "DateTimeRange": "DateTimeRange",
    "Editor": "Editor",
    "EditorForm": "EditorForm",
    "FloatingLabel": "FloatingLabel",
    "Input": "Input",
    "InputNumber": "InputNumber",
    "Markdown": "Markdown",
    "MultiSelect": "MultiSelect",
    "Radio": "Radio",
    "Rate": "Rate",
    "Select": "Select",
    "Slider": "Slider",
    "Switch": "Switch",
    "Textarea": "Textarea",
    "Toggle": "Toggle",
    "Transfer": "Transfer",
    "Upload": "Upload",
    "ValidateForm": "ValidateForm",
    "DataComponents": "DATAS",
    "Avatar": "Avatar",
    "Badge": "Badge",
    "BarcodeReader": "BarcodeReader",
    "Card": "Card",
    "Calendar": "Calendar",
    "Camera": "Camera",
    "Captcha": "Captcha",
    "Carousel": "Carousel",
    "Circle": "Circle",
    "Collapse": "Collapse",
    "Display": "Display",
    "DropdownWidget": "DropdownWidget",
    "GroupBox": "GroupBox",
    "HandwrittenPage": "HandwrittenPage",
    "ListView": "ListView",
    "Locator": "Locator",
    "Popover": "Popover",
    "Print": "Print",
    "QRCode": "QRCode",
    "Search": "Search",
    "Tag": "Tag",
    "Timeline": "Timeline",
    "Title": "Title",
    "Download": "Download",
    "Tooltip": "Tooltip",
    "Tree": "Tree",
    "Table": "Table",
    "TableBase": "Base",
    "TableRow": "Row",
    "TableColumn": "Column",
    "TableCell": "Cell",
    "TableDetail": "Detail",
    "TableDynamic": "Dynamic",
    "TableSearch": "Search",
    "TableFilter": "Sort/Filter",
    "TableFixHeader": "FixHeader",
    "TableHeaderGroup": "HeaderGroup",
    "TableFixColumn": "FixColumn",
    "TablePage": "Pagination",
    "TableToolbar": "Toolbar",
    "TableEdit": "Edit",
    "TableDynamicExcel": "Excel-DataTable",
    "TableExcel": "Excel-Items",
    "TableExport": "Export",
    "TableSelection": "Selection",
    "TableAutoRefresh": "AutoRefresh",
    "TableFooter": "Footer",
    "TableDialog": "Table-Dialog",
    "TableWrap": "Wrap",
    "TableTree": "Table-Tree",
    "TableLaoding": "Table-Loading",
    "TableLookup": "Lookup",
    "MenuAccordion": "Accordion",
    "MenuExpandAll": "Expand",
    "Empty": "Empty",
    "Charts": "Chart",
    "ChartSummary": "Introduction",
    "ChartLine": "Line",
    "ChartBar": "Bar",
    "ChartPie": "Pie",
    "ChartDoughnut": "Doughnut",
    "ChartBubble": "Bubble",
    "Transition": "Transition"
  },
  "BootstrapBlazor.Shared.Pages.Empties": {
    "Title": "Empty",
    "SubTitle": "Sub Title PlaceHolder"
  },
  "BootstrapBlazor.Shared.Pages.Table.TablesFooter": {
    "Left": "Left",
    "Center": "Center",
    "Right": "Right"
  },
  "BootstrapBlazor.Shared.Pages.Table.TablesDetailRow": {
    "DetailTextTrue": "Enable",
    "DetailTextFalse": "Disable"
  },
  "BootstrapBlazor.Shared.Pages.Table.Tables": {
    "RefreshText": "Refresh",
    "ButtonAddColumnText": "Add Column",
    "ButtonRemoveColumnText": "Remove Column"
  },
  "BootstrapBlazor.Shared.Pages.Introduction": {
    "Title": "Introduction",
    "P1": "BootstrapBlazor is an enterprise-level component library based on Bootstrap and Blazor, which can be considered as the Blazor version of the Bootstrap project.",
    "P2": "The dependency is：BootstrapBlazor > Bootstrap > jQuery",
    "P3": "In the latest <a href='template' target='_blank'>Project Template</a> ,the above dependencies are packaged and bundled, which greatly simplifies use",
    "UpdateTitle": "Update Log",
    "P4": "This component may be released every day <b><code>beta</code></b> version, every <b><code>Thursday</code></b> release <b><code>official version </code></b> <a id='log' data-bs-toggle='popover' title='Update log' data-bs-content='This component may have <b><code >beta</code></b> version released, every <b><code>Thursday</code></b> release <b><code>official version</code></b> update log' data-bs-html='true' href='{0}' target='_blank'>Update log</a>",
    "LearnTitle": "Learning materials",
    "LearnLi1": "Blazor Official Document",
    "LearnLi2": "Use Blazor WebAssembly and Visual Studio Code to generate web applications",
    "LearnLi3": "What is Blazor",
    "LearnLi4": "Exercise-Configure the development environment",
    "LearnLi5": "Blazor Components",
    "LearnLi6": "Exercise-Add Components",
    "LeanrnLi7": "Data binding and events",
    "LearnLi8": "Exercise-Data binding and Events",
    "Summarize": "Summarize",
    "ProjectsShow": "Gllery",
    "P5": "The largest code hosting collaborative development platform in China <b><a href='{0}' target='_blank'>Gitee</a></b> C# The highest star in the sector <a href='{1}'><img src='{2}' alt='star' style='margin-bottom',: '1px;' ></a> Works <b><a href='{3}' target=''_blank'>Universal background management system BootstrapAdmin</a></b> Ready to use this component to achieve all functions",
    "ShowWebSiteTitle": "Demo Site",
    "GetStarted": "Get Started",
    "QuikStart": "Quick Start",
    "Features": "Features of Components",
    "P6": "The Bootstrap Blazor UI component library provides everything from basic <code>Button</code> components to advanced web-level <code>SmartPage</code> components",
    "Advantage": "Advantage",
    "AdvantageLi1": "No need to write <code>Javascript</code> to use components",
    "AdvantageLi2": "The component supports all <code>html</code> features",
    "AdvantageLi3": "The component supports two-way data binding",
    "AdvantageLi4": "Components support automatic client verification",
    "AdvantageLi5": "Component support combination",
    "Community": "Community"
  },
  "BootstrapBlazor.Shared.Pages.Components.QQGroup": {
    "Group": "QQ Group",
    "Status": " Full",
    "Welcome": "Welcome to join the group discussion"
  },
  "BootstrapBlazor.Shared.Pages.Components.EventTable": {
    "Title": "Event"
  },
  "BootstrapBlazor.Shared.Pages.HandwrittenPage": {
    "Title": "Handwritten",
    "SubTitle": "Used to save the mobile terminal signature as Base64 encoded string",
    "BaseUsageText": "Basic usage",
    "IntroText1": "Touch device handwritten signature as Base64.",
    "IntroText2": "For desktop browser testing, please use F12 to simulate a touch device.",
    "HandwrittenButtonText": "Signature"
  }
}
